package fi.fmi.geoserver.apikey;

import java.net.URL;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import org.geoserver.ows.URLMangler;
import org.springframework.web.context.request.RequestAttributes;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

/**
 * Re-injects the eventual API key in all backlinks generated by GeoServer.
 *
 * <p>API key path is included directly into the beginning of URL path of given base URL.
 */
public class ApiKeyMangler implements URLMangler {

    /** Header key for API key value. */
    private static final String API_KEY_HEADER = "fmi-apikey";
    /** Header key for API key omit value. */
    private static final String OMIT_API_KEY_HEADER = "omit-fmi-apikey";
    /**
     * URL parameter key for API key value. Notice, URL parameter is not checked if this key is
     * {null} or empty. Normally, {API_KEY_HEADER} may also be set for this value.
     */
    private static final String API_KEY_PARAMETER = null;
    /** URL path separator. */
    private static final String URL_SEPARATOR = "/";
    /** URL path for API key. */
    private static final String API_KEY_URL_PATH = URL_SEPARATOR + API_KEY_HEADER + URL_SEPARATOR;

    /**
     * @param {HttpServletRequest} request May not be {null}.
     * @return {boolean} Omit API key when {true}, else {false}.
     */
    private boolean omitApiKey(final HttpServletRequest request) {
        // Try to get the omit API key from the request headers.
        // Notice, header is case insensitive.
        final String omitApiKey = request.getHeader(OMIT_API_KEY_HEADER);
        // Omit if header given and value is not "0" or "false".
        return !(null == omitApiKey || omitApiKey.equals("0") || omitApiKey.equals("false"));
    }

    /**
     * @param {HttpServletRequest} request May not be {null}.
     * @return {String} API key if given in request header or as request parameter.
     */
    private String getApiKey(final HttpServletRequest request) {
        // Try to get the API key from the request headers.
        // Notice, header is case insensitive.
        String apiKey = request.getHeader(API_KEY_HEADER);
        if (null != API_KEY_PARAMETER
                && !API_KEY_PARAMETER.isEmpty()
                && (null == apiKey || apiKey.isEmpty())) {
            // API key was not in header.
            // Try to get it from parameters.
            final String[] paramApiKey = request.getParameterValues(API_KEY_PARAMETER);
            if (null != paramApiKey
                    && 0 < paramApiKey.length
                    && null != paramApiKey[0]
                    && !paramApiKey[0].isEmpty()) {
                apiKey = paramApiKey[0];
            }
        }
        return apiKey;
    }

    /**
     * Get API key from the request header or from URL parameters and append API key as path to the
     * base URL.
     *
     * <p>Also, see super URLMangler class for function description.
     */
    public void mangleURL(
            StringBuilder baseURL, StringBuilder path, Map<String, String> kvp, URLType type) {
        try {
            // Change backlinks of GeoServer URLs.
            if (null != baseURL && URLType.EXTERNAL != type) {
                // Use context holder to get the request object.
                final RequestAttributes attributes =
                        RequestContextHolder.currentRequestAttributes();
                // API key is related to the HTTP requests.
                // So, make sure HTTP request is at hand.
                if (attributes instanceof ServletRequestAttributes) {
                    final HttpServletRequest request =
                            ((ServletRequestAttributes) attributes).getRequest();
                    if (null != request && !omitApiKey(request)) {
                        // Get possible API key from the request.
                        final String apiKey = getApiKey(request);
                        // API key path will be included into base URL only
                        // if API key value has been provided and is not
                        // already in URL. Notice, base URL may also contain the
                        // application info.
                        if (null != apiKey && !apiKey.isEmpty()) {
                            // Notice, API key path should always end with
                            // separator slash. Then, additional paths are
                            // always relative to the whole base URL path and
                            // not only relative to the API_KEY_URL_PATH of the
                            // base URL. Slash will be included to path case by
                            // case.
                            final String apiKeyPath = API_KEY_URL_PATH + apiKey;
                            if (0 < baseURL.length()) {
                                // Insert API key into the beginning of base URL
                                // path if API key is not already included
                                // there.
                                final URL url = new URL(baseURL.toString());
                                // Given path will always be at least an empty
                                // string. And, path always starts with
                                // URL_SEPARATOR slash.
                                final String baseUrlPath = url.getPath();
                                if (!baseUrlPath.isEmpty()) {
                                    if (!baseUrlPath.startsWith(apiKeyPath + URL_SEPARATOR)) {
                                        final int pathIndex = baseURL.indexOf(baseUrlPath);
                                        // Path should always be found from the
                                        // base URL here. But, check just to be
                                        // sure.
                                        if (-1 != pathIndex) {
                                            // Notice, path contains
                                            // URL_SEPARATOR slash.
                                            // So, no need to add it here.
                                            baseURL.insert(pathIndex, apiKeyPath);
                                        }
                                    }

                                } else {
                                    // Directly append API key because base URL
                                    // path is empty.
                                    baseURL.append(apiKeyPath + URL_SEPARATOR);
                                }

                            } else {
                                // Directly append API key because base URL is
                                // empty.
                                baseURL.append(apiKeyPath + URL_SEPARATOR);
                            }
                        }
                    }
                }
            }

        } catch (final Exception e) {
            // Just ignore whole operation.
            // An exception may occur, for example,
            // if base URL does not contain protocol
            // and URL is thought to be malformed.
            System.err.println(getClass().getName() + ": " + e.toString());
        }
    }
}
